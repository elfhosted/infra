apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: cyberflix
  namespace: cyberflix
spec:
  chart:
    spec:
      chart: app-template
      version: 0.2.1
      sourceRef:
        kind: HelmRepository
        name: elfhosted
        namespace: flux-system
  interval: 15m
  timeout: 5m
  releaseName: cyberflix
  values:
    global:
      nameOverride: cyberflix
    image:
      repository: ghcr.io/elfhosted/cyberflix-server
      tag: rolling@sha256:65967650e4ca552f6377e5dbaac65dffc8537afb272358583062cf57f9f7692d
    securityContext:
      seccompProfile:
        type: RuntimeDefault
      readOnlyRootFilesystem: true
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
      runAsUser: 568
      runAsGroup: 568
      fsGroup: 568
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities:
        drop:
        - ALL        
    automountServiceAccountToken: false
    controller:
      replicas: 4
      strategy: Recreate
      annotations:
        configmap.reloader.stakater.com/reload: "cyberflix-env,cyberflix-env-dev-overrides"
        secret.reloader.stakater.com/reload: "cyberflix-env,cyberflix-env-dev-overrides"
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution: 
        - weight: 100  
          podAffinityTerm:    
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - cyberflix
            topologyKey: "kubernetes.io/hostname"
    persistence:
      tmp: 
        enabled: true
        type: emptyDir
        mountPath: /tmp
      output: 
        enabled: true
        type: emptyDir
        mountPath: /home/node/app/.output
      nitro: 
        enabled: true
        type: emptyDir
        mountPath: /home/node/app/.nitro
      db: 
        enabled: true
        type: emptyDir
        mountPath: /app/db        
      # db:
      #   enabled: true
      #   type: custom
      #   mountPath: /app/db/
      #   volumeSpec:
      #     persistentVolumeClaim:
      #       claimName: cyberflix           
    envFrom:
    - secretRef:
        name: cyberflix-env 
    - secretRef:
        name: cyberflix-env-dev-overrides
        optional: true        
    - configMapRef:
        name: cyberflix-env 
    - configMapRef:
        name: cyberflix-env-dev-overrides
        optional: true        
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
        ephemeral-storage: 50Mi
      limits:
        cpu: 1 # never gets here because it's single-threaded
        memory: 4Gi
        ephemeral-storage: 1Gi        
    ingress:
      main:
        enabled: false
    service:
      main:
        enabled: true # necessary for probes
        ports:
          http:
            port: 8000
    probes:
      liveness:
        custom: true
        enabled: true
        spec:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10            
      readiness:
        custom: true
        enabled: true
        spec:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
      startup:
        custom: true
        enabled: true
        spec:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
    initContainers:
      setup:
        image: ghcr.io/elfhosted/cyberflix-server:rolling@sha256:65967650e4ca552f6377e5dbaac65dffc8537afb272358583062cf57f9f7692d
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          set -x
          set -e

          # the volume is empty
          if [ -z "$(ls -A /db)" ]; then
            # Copy the baked-in DB into the volume
            cp /app/db/* /db/   
          fi
        volumeMounts:        
        - mountPath: /db
          name: db
       