apiVersion: v1
kind: ConfigMap
metadata:
  name: tenant-cleaner
  namespace: webhook-receiver
data:
  tenant-cleaner.sh: |
    #!/bin/bash

    # setup git
    git config --global user.name "Elfbot"
    git config --global user.email "elfbot@elfhosted.com"
    git config --global pull.rebase true

    set -x
    # set -e

    gh auth setup-git

    TEMPDIR=$(mktemp -d)
    cd $TEMPDIR
    gh repo clone elfhosted/tenants -- --depth=1
    git config --global --add safe.directory tenants
    cd tenants/fsn/

    BRANCH_NAME="tenant-cleaner"
    BASE_BRANCH="main"

    # Fetch and prepare branches
    git fetch origin
    git checkout "$BASE_BRANCH"
    git pull origin "$BASE_BRANCH"

    if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
      git checkout "$BRANCH_NAME"
      git merge "$BASE_BRANCH"
    else
      git checkout -b "$BRANCH_NAME"
    fi

    # ../scripts/process-all-customers.sh

    # clean out unused namespaces / kustomizations
    for TENANT in $(ls bootstrap/namespaces/namespace-*.yaml | cut -f2 -d- | cut -f1 -d.); do
      # Avoid null tenants
      if [[ ! "$TENANT" == "" ]]; then
        PVCs=$(kubectl get pvc -n aa-$TENANT)
        if [[ "$PVCs" == "" ]]; then
          # it's empty, we can delete it
          rm bootstrap/namespaces/namespace-$TENANT.yaml
          rm bootstrap/kustomizations/kustomization-$TENANT.yaml
          rm -rf tenants/$TENANT
        fi
      fi
    done
    
    DATE=$(date +"%Y-%m-%d")

    git add .
    git commit -m "Tenant cleaner cleans tenants on $DATE" .

    # Create or update PR
    if gh pr list --head "$BRANCH_NAME" --base "$BASE_BRANCH" --state open --json number --jq '.[0]' &>/dev/null; then
      echo "Pull request already exists."
      sleep 1h
    else
      gh pr create --title "Tenant Cleaner" --body "Tenant Cleaner" --base "$BASE_BRANCH" --head "$BRANCH_NAME" --assignee funkypenguin
    fi