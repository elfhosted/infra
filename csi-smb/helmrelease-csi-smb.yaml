apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: csi-smb
  namespace: csi-smb
spec:
  chart:
    spec:
      chart: csi-driver-smb
      version: 1.13.x
      sourceRef:
        kind: HelmRepository
        name: csi-driver-smb
        namespace: flux-system
  interval: 15m
  timeout: 5m
  releaseName: csi-smb
  values:
    image:
      baseRepo: registry.k8s.io/sig-storage
      smb:
        repository: gcr.io/k8s-staging-sig-storage/smbplugin
        tag: canary
        pullPolicy: IfNotPresent
      csiProvisioner:
        repository: registry.k8s.io/sig-storage/csi-provisioner
        tag: v3.6.2
        pullPolicy: IfNotPresent
      livenessProbe:
        repository: registry.k8s.io/sig-storage/livenessprobe
        tag: v2.11.0
        pullPolicy: IfNotPresent
      nodeDriverRegistrar:
        repository: registry.k8s.io/sig-storage/csi-node-driver-registrar
        tag: v2.9.1
        pullPolicy: IfNotPresent
      csiproxy:
        repository: ghcr.io/kubernetes-sigs/sig-windows/csi-proxy
        tag: v1.1.2
        pullPolicy: IfNotPresent

    serviceAccount:
      create: true # When true, service accounts will be created for you. Set to false if you want to use your own.
      controller: csi-smb-controller-sa
      node: csi-smb-node-sa

    rbac:
      create: true
      name: smb

    driver:
      name: smb.csi.k8s.io

    feature:
      enableGetVolumeStats: true

    controller:
      name: csi-smb-controller
      replicas: 2
      dnsPolicy: ClusterFirstWithHostNet  # available values: Default, ClusterFirstWithHostNet, ClusterFirst
      metricsPort: 29644
      livenessProbe:
        healthPort: 29642
      runOnMaster: false
      runOnControlPlane: false
      logLevel: 5
      workingMountDir: "/tmp"
      resources:
        csiProvisioner:
          limits:
            memory: 300Mi
          requests:
            cpu: 10m
            memory: 20Mi
        livenessProbe:
          limits:
            memory: 100Mi
          requests:
            cpu: 10m
            memory: 20Mi
        smb:
          limits:
            memory: 200Mi
          requests:
            cpu: 10m
            memory: 20Mi
      affinity: {}
      nodeSelector: {}
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/controlplane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.${dns_domain}/dedicated"
          operator: "Exists"
          effect: "NoSchedule" 
        - key: "node-role.${dns_domain}/hobbit"
          operator: "Exists"
          effect: "NoSchedule"                    
        - key: "node-role.${dns_domain}/download-only"
          operator: "Exists"
          effect: "NoSchedule"  
        - key: "node-role.${dns_domain}/observability"
          operator: "Exists"
          effect: "NoSchedule"                    

    node:
      maxUnavailable: 1
      logLevel: 5
      livenessProbe:
        healthPort: 29643
      affinity: {}
      nodeSelector: {}

    linux:
      enabled: true
      dsName: csi-smb-node # daemonset name
      dnsPolicy: ClusterFirstWithHostNet  # available values: Default, ClusterFirstWithHostNet, ClusterFirst
      kubelet: /var/lib/kubelet
      tolerations:
        - operator: "Exists"
      resources:
        livenessProbe:
          limits:
            memory: 100Mi
          requests:
            cpu: 10m
            memory: 20Mi
        nodeDriverRegistrar:
          limits:
            memory: 100Mi
          requests:
            cpu: 10m
            memory: 20Mi
        smb:
          limits:
            memory: 200Mi
          requests:
            cpu: 10m
            memory: 20Mi

    windows:
      enabled: false # Unless you already had csi proxy installed, windows.csiproxy.enabled=true is required
      dsName: csi-smb-node-win # daemonset name
      kubelet: 'C:\var\lib\kubelet'
      removeSMBMappingDuringUnmount: true
      tolerations:
        - key: "node.kubernetes.io/os"
          operator: "Exists"
          effect: "NoSchedule"
      resources:
        livenessProbe:
          limits:
            memory: 150Mi
          requests:
            cpu: 10m
            memory: 40Mi
        nodeDriverRegistrar:
          limits:
            memory: 150Mi
          requests:
            cpu: 10m
            memory: 40Mi
        smb:
          limits:
            memory: 200Mi
          requests:
            cpu: 10m
            memory: 40Mi
      csiproxy:
        enabled: false # required if windows.enabled is true, but may be installed manually also
        dsName: csi-proxy-win # daemonset name
        tolerations: {}
        affinity: {}
        username: "NT AUTHORITY\\SYSTEM"
        nodeSelector:
          "kubernetes.io/os": windows

    customLabels: {}
    ## Collection of annotations to add to all the pods
    podAnnotations: {}
    ## Collection of labels to add to all the pods
    podLabels: {}
    ## Leverage a PriorityClass to ensure your pods survive resource shortages
    ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    priorityClassName: system-cluster-critical
    ## Security context give the opportunity to run container as nonroot by setting a securityContext
    ## by example :
    ## securityContext: { runAsUser: 1001 }
    securityContext: { seccompProfile: {type: RuntimeDefault} }